<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.itheima.springboot</groupId>
	<artifactId>springboot</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>springbootfirst</name> <!--右边项目名-->
	<description>第二次编写springboot </description>

	<parent><!-- 1.必须添加的父依赖 -->
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.2.RELEASE</version>
	</parent>

	<dependencies>

		<dependency>
			<groupId>com.zhenzikj</groupId>
			<artifactId>zhenzisms</artifactId>
			<version>2.0.2</version>
		</dependency>
		<!-- 2.starter模块 插件运行 在debug maven 一系列的依赖包组合：web starter模块，就是包含了Spring 
			Boot预定义的一些Web开发的常用依赖 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<!-- <parent>里已经有了 这里不需要 <dependency> <groupId>org.springframework</groupId> 
			<artifactId>spring-webmvc</artifactId> <version>4.3.7.RELEASE</version> </dependency> -->
		<!-- 连接池 -->
		<dependency>
			<groupId>com.jolbox</groupId>
			<artifactId>bonecp-spring</artifactId>
			<version>0.8.0.RELEASE</version>
		</dependency>
		<!-- 热部署 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
		<!-- 监管 配置management.security.enabled=false management.context-path=/manage 
			访问前加的配置，方便项目里面设置权限 management.port=8081 设置监管的端点端口 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-actuator</artifactId>
		</dependency>
		<!-- HttpRequest请求工具 -->
		<dependency>
			<groupId>cn.hutool</groupId>
			<artifactId>hutool-all</artifactId>
			<version>4.5.12</version>
		</dependency>
		<!-- lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<!-- alibaba json工具 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid-spring-boot-starter</artifactId>
			<version>1.1.10</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.58</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.8.13</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.13</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<!-- cglib 动态代理 -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.2.5</version>
		</dependency>
		<dependency>
			<groupId>org.ow2.asm</groupId>
			<artifactId>asm</artifactId>
			<version>5.2</version>
		</dependency>
		<!-- mybatis 不添加报 java.lang.NoClassDefFoundError: org/springframework/dao/DataAccessException  错误 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>2.2.2</version>
		</dependency>

		<dependency>
			<groupId>com.belerweb</groupId>
			<artifactId>pinyin4j</artifactId>
			<version>2.5.0</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>${project.artifactId}</finalName><!--打包出来jar包名-->
		<plugins>
			<!-- 资源文件拷贝插件 是处理将 主程序与 测试程序所需的源文件复制到输出编译文件夹中 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- java编译插件 ，如果不指定 JDK 版本，maven-compiler-plugin 会自动使用一个默认的版本，该版本可能与你使用的 IDE 所使用的 JDK 版本不一致，
				这种情况可能会导致代码无法通过 maven 的编译，例如：在 IDE 指定 JDK 1.8 ，coding 的时候使用了JDK 1.8 的特性，而 maven-compiler-plugin 默认的 JDK 版本为 1.5-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
					<source>1.8</source><!-- 源代码使用的JDK版本 -->
					<target>1.8</target><!-- 需要生成的目标class文件的编译版本 -->
					<encoding>UTF-8</encoding><!-- 字符集编码 -->
					<!--skipTests>true</skipTests>< 跳过测试 -->
			        <!-- <verbose>true</verbose>
			        <showWarnings>true</showWarnings>                                                                                                               
			        <fork>true</fork>要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 -->                                                        
			        <executable><!-- path-to-javac --></executable><!-- 使用指定的javac命令，例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> -->           
			        <!--<compilerVersion>1.3</compilerVersion> 指定插件将使用的编译器的版本 -->                                                                         
			        <!-- <meminitial>128m</meminitial>编译器使用的初始内存 -->                                                                                      
			        <!--<maxmem>512m</maxmem> 编译器使用的最大内存 -->                                                                                              
			        <!--<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument> 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->               
				</configuration>
			</plugin>
			<plugin><!-- 3.打包成可执行的架包 -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!-- 配置Tomcat插件 -->
				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat8-maven-plugin</artifactId>
					<version>2.2</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>